// <auto-generated />
using System;
using EmploymentExchange.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmploymentExchange.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20230701193905_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmploymentExchange.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EmploymentExchange.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecruiterEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EmploymentExchange.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<Guid>("JobPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("JobTypeId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("EmploymentExchange.Models.JobPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("EmploymentExchange.Models.JobType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JobTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b159f5a1-1b92-498e-841e-f890e442a1ed"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1048),
                            Name = "Full-time",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1061)
                        },
                        new
                        {
                            Id = new Guid("3359b02a-779e-4ed8-a4f6-8af06fecc132"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1067),
                            Name = "Part-time",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1068)
                        },
                        new
                        {
                            Id = new Guid("ad9748fe-5220-45ed-b8f2-1d16f1cb9b6d"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1070),
                            Name = "Contract",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1070)
                        },
                        new
                        {
                            Id = new Guid("0b422690-2508-4e4a-9938-227a320d0301"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1072),
                            Name = "Internship",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1072)
                        });
                });

            modelBuilder.Entity("EmploymentExchange.Models.JobUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobUser");
                });

            modelBuilder.Entity("EmploymentExchange.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("ntext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("874a9195-c738-4c27-b36a-c34a83d9d7ea"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1076),
                            Description = "Site owner",
                            Name = "Admin",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1076)
                        },
                        new
                        {
                            Id = new Guid("7d5017b7-693d-4938-96ef-7ca82b01b721"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1081),
                            Description = "Recruiter, looking for employ personal",
                            Name = "Poster",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1081)
                        },
                        new
                        {
                            Id = new Guid("8d88053c-a6a9-41ea-8a25-745618623b6d"),
                            CreatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1083),
                            Description = "Employee, looking for a job",
                            Name = "User",
                            State = true,
                            UpdatedAt = new DateTime(2023, 7, 1, 15, 39, 5, 574, DateTimeKind.Local).AddTicks(1083)
                        });
                });

            modelBuilder.Entity("EmploymentExchange.Models.RoleUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("EmploymentExchange.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_Users_Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EmploymentExchange.Models.Job", b =>
                {
                    b.HasOne("EmploymentExchange.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmploymentExchange.Models.JobPosition", "JobPosition")
                        .WithMany()
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmploymentExchange.Models.JobType", "JobType")
                        .WithMany()
                        .HasForeignKey("JobTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("JobPosition");

                    b.Navigation("JobType");
                });

            modelBuilder.Entity("EmploymentExchange.Models.JobPosition", b =>
                {
                    b.HasOne("EmploymentExchange.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EmploymentExchange.Models.JobUser", b =>
                {
                    b.HasOne("EmploymentExchange.Models.Job", "Job")
                        .WithMany("JobsUsers")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmploymentExchange.Models.User", "User")
                        .WithMany("JobsUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmploymentExchange.Models.RoleUser", b =>
                {
                    b.HasOne("EmploymentExchange.Models.Role", "Role")
                        .WithMany("RolesUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmploymentExchange.Models.User", "User")
                        .WithMany("RolesUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EmploymentExchange.Models.Job", b =>
                {
                    b.Navigation("JobsUsers");
                });

            modelBuilder.Entity("EmploymentExchange.Models.Role", b =>
                {
                    b.Navigation("RolesUsers");
                });

            modelBuilder.Entity("EmploymentExchange.Models.User", b =>
                {
                    b.Navigation("JobsUsers");

                    b.Navigation("RolesUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
